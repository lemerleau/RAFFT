* Resutls statistical significance

#+begin_src python :results output
from utils import paired_positions
import subprocess
import matplotlib.pyplot as plt
from matplotlib import rcParams, artist
from matplotlib.patches import Patch
from numpy import mean, std, median, linspace, arange
from scipy.stats import kde, ttest_ind
from math import isnan
from RNA import fold_compound, bp_distance
from utils_analysis import get_loop_content
plt.rcParams["font.family"] = "serif"
plt.rcParams["font.weight"] = "bold"
plt.rcParams["font.size"] = 6.7
plt.rcParams["figure.figsize"] = 8, 4


def read_true_struct(infile="./kinetic_bench/benchmark_cleaned_red_all_length.csv"):
    results = {}
    for l in open(infile):
        seq, struct, name = l.strip().split(",")
        results[seq] = (struct, name)
    return results


def read_csv(infile):
    results = {}
    first = True
    for l in open(infile):
        if not first:
            seq, len_seq, struct, nrj, nb_bp, pvv, sens, name = l.strip().split(",")
            if struct != "Na":
                if pvv == "nan":
                    pvv = 0.0
                results[seq] = (int(len_seq), struct, float(nrj), int(nb_bp), float(pvv), float(sens))
        else:
            first = False
    return results


fft_pred = read_csv("./kinetic_bench/results_fft_all_length_100n_50ms_scores.csv")
# fft_pred = read_csv("./test_data/results_fft_100n_30_stack_scores.csv")
# line_pred = read_csv("./kinetic_bench/results_kinefold_scores.csv")
line_pred = read_csv("./kinetic_bench/results_fft_all_length_100n_50ms_best_nrj_scores.csv")
cont_pred = read_csv("./test_data/results_context_scores.csv")
mx_pred = read_csv("./test_data/results_mxfold_scores.csv")
vrna_pred = read_csv("./test_data/results_mfe_scores.csv")
# vrna_pred = read_csv("./test_data/results_mfe_scores.csv")
true_str = read_true_struct()
fft_all_v, mfe_all_v, cont_all_v, line_all_v, mx_all_v = [], [], [], [], []
fft_to_plot, mfe_to_plot, cont_to_plot, line_to_plot, mx_to_plot = {}, {}, {}, {}, {}

nb = 0
with open("analysis.log", "w") as out:
    for seq, (struct, name) in true_str.items():
        seq_comp = fold_compound(seq)
        true_loop_content = get_loop_content(struct)

        true_nb_bp = struct.count("(")
        true_nrj = seq_comp.eval_structure(struct)
        len_seq, mfe_st, mfe_nrj, mfe_nbp, mfe_pvv, mfe_sens = vrna_pred[seq]
        # if seq in fft_pred and seq in vrna_pred and seq in cont_pred and seq in line_pred and seq in mx_pred:
        # if seq in fft_pred and seq in vrna_pred and seq in line_pred:
        
        if seq in fft_pred and seq in line_pred and seq in mx_pred and len(seq) < 200:
            len_seq, fft_st, fft_nrj, fft_nbp, fft_pvv, fft_sens = fft_pred[seq]
            len_seq, line_st, line_nrj, line_nbp, line_pvv, line_sens = line_pred[seq]
            len_seq, mx_st, mx_nrj, mx_nbp, mx_pvv, mx_sens = mx_pred[seq]
            
            # len_seq, cont_st, cont_nrj, cont_nbp, cont_pvv, cont_sens = cont_pred[seq]
            # len_seq, mx_st, mx_nrj, mx_nbp, mx_pvv, mx_sens = mx_pred[seq]
            # save_fft, save_mfe, save_cont, save_line, save_mx = fft_pvv, mfe_pvv, cont_pvv, line_pvv, mx_pvv
            
            save_fft, save_mfe, save_line, save_mx = fft_pvv, mfe_pvv, line_pvv, mx_pvv
            fft_all_v += [save_fft]
            mfe_all_v += [save_mfe]
            line_all_v += [save_line]
            # cont_all_v += [save_cont]
            mx_all_v += [save_mx]

            if len_seq in fft_to_plot:
                fft_to_plot[len_seq] += [save_fft]
                mfe_to_plot[len_seq] += [save_mfe]
                line_to_plot[len_seq] += [save_line]
                # cont_to_plot[len_seq] += [save_cont]
                mx_to_plot[len_seq] += [save_mx]
            else:
                fft_to_plot[len_seq] = [save_fft]
                mfe_to_plot[len_seq] = [save_mfe]
                line_to_plot[len_seq] = [save_line]
                # cont_to_plot[len_seq] = [save_cont]
                mx_to_plot[len_seq] = [save_mx]

list_len = list(fft_to_plot.keys())
list_len.sort()
nb_el = len(list_len)

fft_mean = [mean(fft_to_plot[len_]) for len_ in list_len]
mfe_mean = [mean(mfe_to_plot[len_]) for len_ in list_len]
line_mean = [mean(line_to_plot[len_]) for len_ in list_len]
mx_mean = [mean(mx_to_plot[len_]) for len_ in list_len]
print(len(fft_all_v))
print(mean(fft_mean) - mean(mx_mean))
print(mean(fft_mean))
print(ttest_ind(mx_mean, fft_mean))
#+end_src

#+RESULTS:
: 1984
: 2.3222335391217115
: 79.04952429300945
: Ttest_indResult(statistic=-0.882471482720692, pvalue=0.3784432640336083)

0.8641114982578397
* Scoring

read structures
#+begin_src python :results output
from utils import paired_positions
import subprocess
import matplotlib.pyplot as plt
from matplotlib import rcParams, artist
from matplotlib.patches import Patch
from numpy import mean, std, median, linspace, arange
from scipy.stats import kde
from math import isnan
from RNA import fold_compound, bp_distance
from utils_analysis import get_loop_content, read_csv
plt.rcParams["font.family"] = "serif"
plt.rcParams["font.weight"] = "bold"
plt.rcParams["font.size"] = 6.7
plt.rcParams["figure.figsize"] = 8, 4


def read_true_struct(infile="./kinetic_bench/benchmark_cleaned_red_all_length.csv"):
    results = {}
    for l in open(infile):
        seq, struct, name = l.strip().split(",")
        results[seq] = (struct, name)
    return results

fft_pred = read_csv("./kinetic_bench/results_fft_all_length_200n_200ms_scores.csv")
# fft_pred = read_csv("./test_data/results_fft_100n_30_stack_scores.csv")
# line_pred = read_csv("./kinetic_bench/results_kinefold_scores.csv")
line_pred = read_csv("./kinetic_bench/results_fft_all_length_100n_50ms_scores.csv")
cont_pred = read_csv("./test_data/results_context_scores.csv")
mx_pred = read_csv("./test_data/results_mxfold_scores.csv")
vrna_pred = read_csv("./test_data/results_mfe_scores.csv")
# vrna_pred = read_csv("./test_data/results_mfe_scores.csv")
true_str = read_true_struct()
fft_all_v, mfe_all_v, cont_all_v, line_all_v, mx_all_v = [], [], [], [], []
fft_to_plot, mfe_to_plot, cont_to_plot, line_to_plot, mx_to_plot = {}, {}, {}, {}, {}

nb = 0
with open("analysis.log", "w") as out:
    for seq, (struct, name) in true_str.items():
        seq_comp = fold_compound(seq)
        true_loop_content = get_loop_content(struct)

        true_nb_bp = struct.count("(")
        true_nrj = seq_comp.eval_structure(struct)
        len_seq, mfe_st, mfe_nrj, mfe_nbp, mfe_pvv, mfe_sens = vrna_pred[seq]
        # if seq in fft_pred and seq in vrna_pred and seq in cont_pred and seq in line_pred and seq in mx_pred:
        # if seq in fft_pred and seq in vrna_pred and seq in line_pred:
        
        if true_loop_content[4] > 0.3:
            print(seq)
            print(struct)
        if seq in fft_pred and seq in line_pred and seq in mx_pred:
            len_seq, fft_st, fft_nrj, fft_nbp, fft_pvv, fft_sens = fft_pred[seq]
            len_seq, line_st, line_nrj, line_nbp, line_pvv, line_sens = line_pred[seq]
            len_seq, mx_st, mx_nrj, mx_nbp, mx_pvv, mx_sens = mx_pred[seq]
            
            # len_seq, cont_st, cont_nrj, cont_nbp, cont_pvv, cont_sens = cont_pred[seq]
            # len_seq, mx_st, mx_nrj, mx_nbp, mx_pvv, mx_sens = mx_pred[seq]
            # save_fft, save_mfe, save_cont, save_line, save_mx = fft_pvv, mfe_pvv, cont_pvv, line_pvv, mx_pvv
            
            if mfe_pvv < 10 and len_seq < 80:
                out.write("-"*10+"\n")
                out.write(f"{fft_pvv} {mfe_pvv}\n")
                out.write(f"FFT = {fft_nrj} TRUE = {true_nrj} MFE = {mfe_nrj}\n")
                out.write(f"LEN {len_seq}\n")
                out.write(f"{seq}\n")
                out.write(f"{fft_st}\n")
                out.write(f"{mfe_st}\n")
                out.write(f"{struct}\n")

            save_fft, save_mfe, save_line, save_mx = fft_sens, mfe_sens, line_sens, mx_sens
            fft_all_v += [save_fft]
            mfe_all_v += [save_mfe]
            line_all_v += [save_line]
            # cont_all_v += [save_cont]
            mx_all_v += [save_mx]

            if len_seq in fft_to_plot:
                fft_to_plot[len_seq] += [save_fft]
                mfe_to_plot[len_seq] += [save_mfe]
                line_to_plot[len_seq] += [save_line]
                # cont_to_plot[len_seq] += [save_cont]
                mx_to_plot[len_seq] += [save_mx]
            else:
                fft_to_plot[len_seq] = [save_fft]
                mfe_to_plot[len_seq] = [save_mfe]
                line_to_plot[len_seq] = [save_line]
                # cont_to_plot[len_seq] = [save_cont]
                mx_to_plot[len_seq] = [save_mx]


list_len = list(fft_to_plot.keys())
list_len.sort()
nb_el = len(list_len)

fft_mean = mean([mean(fft_to_plot[len_]) for len_ in list_len if len_ > 0])
mfe_mean = mean([mean(mfe_to_plot[len_]) for len_ in list_len if len_ > 0])
line_mean = mean([mean(line_to_plot[len_]) for len_ in list_len if len_ > 0])

# cont_mean = mean([mean(cont_to_plot[len_]) for len_ in list_len if len_ > 0])
mx_mean = mean([mean(mx_to_plot[len_]) for len_ in list_len if len_ > 0])

slide_mean_fft = [mean([mean(fft_to_plot[l]) for l in list_len[max(0, i-10):min(nb_el, i+10)]]) for i, len_ in enumerate(list_len)]
slide_mean_mfe = [mean([mean(mfe_to_plot[l]) for l in list_len[max(0, i-10):min(nb_el, i+10)]]) for i, len_ in enumerate(list_len)]
slide_mean_line = [mean([mean(line_to_plot[l]) for l in list_len[max(0, i-10):min(nb_el, i+10)]]) for i, len_ in enumerate(list_len)]
# slide_mean_cont = [mean([mean(cont_to_plot[l]) for l in list_len[max(0, i-10):min(nb_el, i+10)]]) for i, len_ in enumerate(list_len)]
slide_mean_mx = [mean([mean(mx_to_plot[l]) for l in list_len[max(0, i-10):min(nb_el, i+10)]]) for i, len_ in enumerate(list_len)]

bpros = dict(color="orange", linewidth=0.2)
fig = plt.figure(1)

left, width = 0.1, 0.65
bottom, height = 0.1, 0.85
spacing = 0.000
rect_scatter = [left, bottom, width, height]
rect_histy = [left + width + spacing, bottom, 0.2, height]
# fft_f = fig.add_subplot(111)
fft_f = fig.add_axes(rect_scatter)

ax_histy = fig.add_axes(rect_histy, sharey=fft_f)
ax_histy.set_ylim([0, 100.0])
xs_scr = linspace(min(fft_all_v), max(fft_all_v), 50)
dens_fft_scr = kde.gaussian_kde(fft_all_v)
dens_mfe_scr = kde.gaussian_kde(mfe_all_v)
dens_line_scr = kde.gaussian_kde(line_all_v)
# dens_cont_scr = kde.gaussian_kde(cont_all_v)
dens_mx_scr = kde.gaussian_kde(mx_all_v)
ax_histy.plot(dens_fft_scr(xs_scr), xs_scr, c="deepskyblue", linewidth=0.8)
ax_histy.plot(dens_mfe_scr(xs_scr), xs_scr, c="orangered", linewidth=0.8)
ax_histy.plot(dens_line_scr(xs_scr), xs_scr, c="green", linewidth=0.8)
# ax_histy.plot(dens_cont_scr(xs_scr), xs_scr, c="blueviolet", linewidth=0.8)
ax_histy.plot(dens_mx_scr(xs_scr), xs_scr, c="blueviolet", linewidth=0.8)
ax_histy.tick_params(axis="y", labelleft=False, size=0)
ax_histy.tick_params(axis="x", labelbottom=False, size=0)
ax_histy.grid(True, color="grey",linestyle="--", linewidth=0.2)

fft_f.set_xlim([0, nb_el]); fft_f.set_ylim([0, 100.0])
fft_f.grid(True, color="grey",linestyle="--", linewidth=0.2)

fft_f.errorbar([i+0.0 for i in range(nb_el)], [mean(fft_to_plot[len_]) for len_ in list_len],
               yerr=[std(fft_to_plot[len_])/4 for len_ in list_len], elinewidth=0.8, fmt=".",
               linewidth=0.2, ms=3, c="skyblue", ecolor="deepskyblue", alpha=0.2)
fft_f.errorbar([i+0.0 for i in range(nb_el)], [mean(mfe_to_plot[len_]) for len_ in list_len],
               yerr=[std(mfe_to_plot[len_])/4 for len_ in list_len], elinewidth=0.8, fmt=".",
               linewidth=0.2, ms=3, c="coral", ecolor="orangered", alpha=0.2)
# fft_f.errorbar([i+0.0 for i in range(nb_el)], [mean(cont_to_plot[len_]) for len_ in list_len],
#                yerr=[std(cont_to_plot[len_])/4 for len_ in list_len], elinewidth=0.8, fmt=".",
#                linewidth=0.2, ms=3, c="blueviolet", ecolor="blueviolet", alpha=0.2)
fft_f.errorbar([i+0.0 for i in range(nb_el)], [mean(line_to_plot[len_]) for len_ in list_len],
               yerr=[std(line_to_plot[len_])/4 for len_ in list_len], elinewidth=0.8, fmt=".",
               linewidth=0.2, ms=3, c="palegreen", ecolor="palegreen", alpha=0.2)
fft_f.errorbar([i+0.0 for i in range(nb_el)], [mean(mx_to_plot[len_]) for len_ in list_len],
               yerr=[std(mx_to_plot[len_])/4 for len_ in list_len], elinewidth=0.8, fmt=".",
               linewidth=0.2, ms=3, c="blueviolet", ecolor="blueviolet", alpha=0.2)

fft_f.scatter([i+0.0 for i in range(nb_el)], [mean(fft_to_plot[len_]) for len_ in list_len], c="deepskyblue", s=0.5)
fft_f.scatter([i+0.0 for i in range(nb_el)], [mean(mfe_to_plot[len_]) for len_ in list_len], c="orangered", s=0.5)
fft_f.scatter([i+0.0 for i in range(nb_el)], [mean(line_to_plot[len_]) for len_ in list_len], c="green", s=0.5)
# fft_f.scatter([i+0.0 for i in range(nb_el)], [mean(cont_to_plot[len_]) for len_ in list_len], c="blueviolet", s=0.5)
fft_f.scatter([i+0.0 for i in range(nb_el)], [mean(mx_to_plot[len_]) for len_ in list_len], c="blueviolet", s=0.5)

fft_f.plot(range(nb_el), slide_mean_fft, linestyle="--", c="deepskyblue", alpha = 0.8)
fft_f.plot(range(nb_el), slide_mean_mfe, linestyle="--", c="orangered", alpha = 0.8)
fft_f.plot(range(nb_el), slide_mean_line, linestyle="--", c="green", alpha = 0.8)
# fft_f.plot(range(nb_el), slide_mean_cont, linestyle="--", c="blueviolet", alpha = 0.8)
fft_f.plot(range(nb_el), slide_mean_mx, linestyle="--", c="blueviolet", alpha = 0.8)

fft_l = Patch(color="skyblue", label="FFT")
mfe_l = Patch(color="tomato", label="VRNA")
line_l = Patch(color="green", label="Line")
cont_l = Patch(color="blueviolet", label="Cont")
mx_l = Patch(color="blueviolet", label="Mxfold")

fft_f.xaxis.set_ticklabels(list_len[::20], rotation=45)
fft_f.xaxis.set_ticks([i for i in range(nb_el)][::20])

name_fft = "RAFFT"
name_mfe = "MFE"
name_cont = "ContextFold"
name_line = "RAFFT*"
name_mx = "Mxfold"

fft_f.set_title(f"Sensitivity")
# fft_f.legend((fft_l,mfe_l,line_l,cont_l, mx_l), (f"{name_fft}({fft_mean:4.1f})", f"{name_mfe}({mfe_mean:4.1f})",
#                                     f"{name_line}({line_mean:4.1f})", f"{name_cont}({cont_mean:4.1f})",
#                                     f"{name_mx}({mx_mean:4.1f})"), loc="bottom center", ncol=3)
fft_f.legend((fft_l,mfe_l,line_l,mx_l), (f"{name_fft}({fft_mean:4.1f})", f"{name_mfe}({mfe_mean:4.1f})",
                                    f"{name_line}({line_mean:4.1f})", f"{name_mx}({mx_mean:4.1f})"), loc="lower center", ncol=4)
# plt.savefig("img/fold_perf_200_sens.png", dpi=300)
plt.show()
#+end_src

#+RESULTS:
#+begin_example
AGUUGUAAAAAACUCCAGCUGAUAUAAAAUAAACUACGAAAGUGGCUUUAAUAUAUCUGAACACACAAUAGCUAGGACCCAAACUGGGAUUAGAUACCCCACUAUGCCUAGCCCUAAACUUCAACAGUUAAAUUAACAAGACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCACAUCCUUCUAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAA
.(((......)))....................(.((....)))..........................((((((...((...((((.........))))...))))))))..........(.(((((..........))))).).....((.......((((....)))).....))................................................((((........))))...............................................
AAUCAGGCUUAGCGGGGAGGACGUGGACCAGCGAGGGUGACGCGCUGCGUUGACGUGGUGCUCUGCUUGGCUGUGUGUCGGUGUGACCCGCACCCCUGCAGAGGGGUGGCGCGGGCCCGCCGUUGAAGCGAGGGAACC
..............................................................................(((.((...(..(((((((....)))))))..)...)))))...(...)...........
CACUCGUGCGAGUAAUCCACGAUCUGCUGUGGCGCGCUAAGCCCUGGCCCGGACCCUCGAGGGAAGCGAUUCUGCAGAGAACAGGACCCCCGGAGAUGGCGGCGCCAGACUACACCCUCGCUGCACA
((.(((((.((....)))))))..)).........((...))...((.((.....(((....(((....)))....)))....)).)).......................................
GUGCUAGACGGGGAGGUAGCGGUGCCCUGUUACCUGCAAUCCGCUAUAGCAGGGUCGAAUUCCUAUAAUAGGCAUGCUUCUGUAAGGUCUGCCCUUUGCAAGUGGCGAUGAAAAUUGGGUCCUACGCAACGGAAGCCUAUGAACCCCGUCAGGUUCGGAAGAAAGCAGCGGUAAG
......(((((((.(.(...).).))))....(((((...........))))))))...................................................................................(.....((((....(((....)))....))))...)
GUCGGGCGGACGCAGCCUUCGCCAACCCGGUCAGGUCCGGAAGGAAGCAGCCGCAACGAAUU
.................((((......((((....(((....)))....))))...))))..
CACUCGUGCGAGUAAUCCACGAUCUGCUGUGGCGCGCUAAGCCCUGGCCCGGACCCUCGAGGGAAGCGAUUCUGCAGAGAACAGGCCCCCCGGAGAUGGCGGCGCCAGACUACACCCUCGCUGCACA
((.(((((.((....)))))))..)).........((...))...((.((.....(((....(((....)))....)))....)).)).......................................
CACUCGAUGCGAGUAAUCCACGAUCUGCUGUGGCGCGCUAAGCCCUGGCCCGGACCCUCGAGGGAAGCGAUUCUGCAGAGAACAGGCCCCCCGGAGAUGGCGGCGCCAGACUACACCCUCGCUGCACA
((.(((.((.((....)))))))..)).........((...))...((.((.....(((....(((....)))....)))....)).)).......................................
GGUGGUCUGCCCGUUCCAAGUUGAGUAGUGGACCGCUUGGGGCCUAUGCGAAAGUUGGGCCUCACGGUCCAUAAUGUGGCAGGCACCGCGUGAGGCUGGCUUCACAGAGCAGCGACAACUGCCCGCUUCCAACGGUGGAAGGAUAACGGGCCGCUGCACUCCUAGGCCGCUUGGGCCUCGUAGCCUACUCCAGCGACCACCAUC
.((((((((.((.(((((.((((.(.(((.(((((..(((((((((.((....))))))))))))))))((...)).(((((......(((....(((......)))....)))....))))).))).)))))..)))))))....))))))))..................................................
AACCAGGCUUAGCGGGGAGGACGUGGACCAGCGAGGGUGAUUUGCUGCGUUGACGUGGUGCUCUGCUUGGCUGUGUGUCGGUGUGGCUUGCCCCCCUGCAGAGGGUGGCGCGGGUCCGCCGUUGAAGCGAGGGAACC
..............................................................................(((.((..(.((((.((((....)))).)))).).)))))...(...)...........
AAUGCGUUAGGCUGGUUUCACAGAGCUGCGAGAACCUCACGCUCUACACAGUGUAAGGAUUACA
..(.(((....(((......)))....))).)................................
UGAACCCCCCCAGGGCCGGAAGGCAGCAAGGGUAAGCGGGCUCUGACGGGUG
(.....(((.....(((....))).....)))..).................
GGGCAAAGCGUGAGGCUGGUUUCACAGAGCAGCGACAACCUCCCUCUCCUUGCAGUGGAAGGAUAAC
((......(((....(((......)))....)))....))...........................
CGCAACACUACCUUGUGAACUCGGUCAGGUCCGGAAGGAAGCAGCCGCAGCAAGCGACGUGUGUGCCGGGAUGUCGCUGGCGGGGCCUCCACC
(((.((((...(((((.....((((....(((....)))....))))..)))))....)))))...)).........................
GAACCGGGUCAGGUCCGGAAGGAAGCAGCCCUAAG
.....((((....(((....)))....))))....
UCCUAGGUGGAGCGGGGGUGUCGUGGACCAGCGAGGGUGGCGCGCUGCGUUGACGCGGUGCUCUGCUUGGCUGUGUGUCGGUGUGGCCUGCCCCCCUGUAGAGGGGUGUCGUAGGCUACCCGUUGAAGCGAGGGAAACC
................................................................................(.((...(.((.(((((....))))).)).)...))).....(...)............
UGAACUCCCCCAGGGCCGGAAGGCAGCAAGGGUCAAUGGGCUCUGGCGGGUGCGCGGGG
(.....(((.....(((....))).....)))...).......................
CCGUGCUAGAUGGGGAGGUAGCGGUGCCCUGUAACCCGCAAACCGCUAUAGCGGGGUUGAAGUCCCA
........(((((((.(.(...).).))))....(((((...........)))))))).........
AGGCUAGGCCGGGGGGUUAGGGGUCCCCUGUAAGCGCAAAUCCCCUAUAUGGCGCGGCCGAAGCCCAGGAGGCGGCAAGACCGCCAGACAUCGGCCUGAGGGUUAAACAAUGAAGCCUCGUCCCACAGGGCCACCGGUGGCGAGGGUCCAGCUG
......(((((((((((.....)))))))....((((.(..........).))))))))...............................................................................................
GUGAACCCGGUCAGGCCCGGAAGGGAGCAGCCGAAGCGGUGGAUGUGUGUGCCG
((.....((((....(((....)))....))))..)).................
UGAACUCCCCCAGGGCCGGAAGGCAGCAAGGGUAAGCGGGCUCUGGCGGGUGC
(.....(((.....(((....))).....)))..)..................
GAAUUCAACGUAUAAACGAGACACAUGCAUAUAUUUUGUUAUGUGUAGACAGAUGGUUACCACCAACGAUCCAGUGUAACUAGUGCACGUGAUGAGUACAAUGGAACAGAACCCGGCUUA
....................(((((((((.(...).)).)))))))................(((..(..(..(((((.....))))).......)..)..)))................
GGAGCAACACUUGUGCGUGAAGUGGGUCAGGGGAGGAAUCCAGCAGCCCUAAGCGAU
...............(((.....((((....(((....)))....))))...)))..
GAACCUCCCCAGGGCCGGAAGGCAGCAAGGAUAAGCGGGCUCUGGCGGGUGCACGGGGGGCCUU
.....(((.....(((....))).....))).................................
CAACACCUAAACCUUGUCAGGACCGGAAGGUAGCAGCAACACGGGAUGCUUGUAGUAGGCGUUGACUCCGGGUC
((((((((.....((((....(((....)))....))))...))).)).)))......................
GGCGGGGGGCUGCGCGGCGCGCCGGCCGCGCUCCGCCGAUGGGCGGACCCAGGCUUGGGGGCCCGAAACCGGGGCCGGGCGGCGCCUCCUGCGGCGUUCCGCCCAGGCUUACCGAGGAGCCCCGGUCCAGCGGGGCGCCAGUCCCCGGCUAGCUCGGCCGUAGGGCCGAGUCAAGCCGGGCAUGCGGGGAACCGGCGGAGGUCCGGGAGGGAGCACGCCUAACCCGCAGCUGGCGCGUUC
...........((.(((.((((.....)))).)))....(.((...........)).)..)).....................................................................((.((((((((.((((..(.((((((((....)))))))).)..).)))..((((((.....((((....(((....)))....))))...)))))))))))))).)).
CCGUGAACCUGGUCAGGCCCGGAAGGGAGCAGCCACAGCGGUGGAUCUGUGUGCCGGGGUGUGGCUGGUAGGGC
((((.....((((....(((....)))....))))..)))).................................
GUGUUCGUUCUUGGUCUACUGAUAUCGCACUCUUUUGGGCUGACUUAAGCUCGGCUUAAUGCUUAAAUUACUGCAAAGGUAGUGUGACUCGAUUGUUUUCUUCAAGUUCCAACAAUCGUGAAAAAUAUGUGAUGAUCAGGGGCUGAGCUAACGCGUUAAACACUCCGCCUGGGGAGUACGGUCGCAAGGCUGAAACUCAAAGAAUUGACGGGGGCCUGCACAAGCGGUGGAGCAUGUGGUUUAAUUCGAUUCAACGCGCAAAACCUUACCAGCCCUUGACAUAUGAAUAAGUGUGCUUGUCCUUAACGGGAUGGUACGAAAAUUCAUACAGGUGUUGCAUGGCUGUCGUCAGCUCGUGUCUUGAGACGUUGGGUUAAGUCCUAUAACGAGCGCAACCCUUGUUUUGUGUUGCUAAGACAUGCUUUGGUUCAAUCCUUGACCACUGGAGACUGACGAAGACUACGCCGUGAAAAUGGAGGAUACCGA
.((((.((((((((((.....................................................................................................................))))))))))...((....))....))))........(((......((((....))))....)))..............................................(.((........)).).....................((((((........(((((.....)))))............)))))).......................(((((((((....)))..((((......))))..))))))...............................................................................................
CUGAACCCCCCCAGGGCCGGAAGGCAGCAAGGGUAGGUGGGCCCUGGCGGGUG
((.....(((.....(((....))).....)))..))................
GAAUCGCGAGUAAUCGUAGAUCAUUAGCGCUACGGUGAAGGUAACCUCUAUUGUGCACACAUUGCCCGUCACCUCCGAUAAUAGUAUUGUACAGGAAGAACUAUGGCUACACUUA
............(((((((..........)))))))...............................................................................
GGCGGGGGGCUGCACGGCGUGCCGGCCGUGCUCCGCCGGAAGGCGGACCCAGGCUUGGGGGCCCGAAACCGGGGCCGGGCGGCGUCUCCGGCGGCGUGCCGCCUGGGCUUACCAAUGAGCUCCGGUCCAGGGGGGCGCCAGUCCCCAGGCUACCCCGGCCGUAGGGCCGGGGGGACCUGGGCAUGCGGGGAAACGGCGGAGGUCCGGGAGGGAGCACGCCUAACCCGCAGCUGGCGCGUUCCCU
...........((.(((.((((.....)))).)))......((...........))....))...................................................................((((.((((((((.((((((.(.((((((((....)))))))).).))))))..((((((.....((((....(((....)))....))))...)))))))))))))).))))..
UGGCUAGGCUGGGAAGUUAGGCGUUUCCUGUAACUCGAAAUCGCCUUUGCGAGAGCCGAAAACUUGAGGGCGGUUUUAAAUUCUGUCAUUCAUUCUCAAGUUUUGUGUAGACAUUUCGUCCUUUGGGGUAAGAUGGCAGAGGAACCUUUUUUGGAAGAAAAAGACAAACCUCUUUUAUCUUUCGAACCCCGUCAGGCCCGGAAGGGAGCAGCGGUAGA
......(((((((((((.....)))))))....((((............))))))))..............................................................................(.(((((...(((((((....))))))).....))))).)......((.....((((....(((....)))....))))..))
AAUCAGUCUGUUACAUUCUAGCAAUGAGUAGCACCAUCACUGGAGGGAAGCAAUUCAGCACAGUAUGUUACCCGUGGUGGAGGCGAAACGGACGGCAC
.....................(...).((((((.....((((....(((....)))....)))).))))))...........................
AGGCAAGGUUGGACUUACGAAUUGUGUCAGGUCCGGAAGGAAGCAGCACUAAGUAUGCU
.............(.(((.....((((....(((....)))....))))...))).)..
UCGCCAACCCGGUCAGGUCCGGAAGGAAGCAGCCGUAACGAGUUUUGCUCGGGUCGUU
(((......((((....(((....)))....))))...))).................
UCCUAGGUGGAGCGGGGGUGUCGUGGACCAGCGAGGGUGGCGCGCUGCGUUGACGCGGUGCUCUGCUUGGCUGUGUGUCGGUGUGGCCUGCCCCCCUGUAGAGGGGUGUCGUAGGCUACCCGUUGAAGCGAGGGAAA
................................................................................(.((...(.((.(((((....))))).)).)...))).....(...)..........
GGAAAGGUAUACCGCCCCAGGCUGGUAAACAGAGCAGGGAAAAGCCCUCGCUCUUGGUAGUGGGAGGAUCUCGUAUCAGAAUUCUGAUGUG
...(.(((......(((....(((.....)))....)))....))).)...........................................
UGGGCCCCACGCAACGGAAGGUUACGAACUCCGUCAGGUCCGGAAGGAAGCAGCGG
..............................((((....(((....)))....))))
GUGCUAGACGGGGAGGUAGCGGUGCCCUGUAACCUGCAAUCCGCUAUAGCAGGGUUGAAUUCCUCAUGGAGGCUUGUUGCUUGUAGGGCUGGCCUAGAUAAGUGGUGAUGAGAAUUGGGUCCUACGCAAUGAAAACUCAUGAACUCCGUCAGAUCCGGAAGGAAGCAGCGGUAAG
......(((((((.(.(...).).))))....(((((...........))))))))...................................................................................(.....((((....(((....)))....))))...)
GGCGGGGGGCUGCGCGGCGUGCCGGCCGCGCGCCGCCGAAAGGCGGACCCAGGCUAGGGAGCCCGAAACUGGGGCCGGGCGGCGCCUCCUGCGGCGUCCCGUCUUGGCUUACCGAUGAGCACCGGUCCAGGGGGGCGCCGGUCCCCAGGCUACCCCGGCCGUAGGGCCGGGGGGACUUGGGUAUGCGGGGAACAGGCGGAGGUCCGGGAGGGAGCACGCCUAACCCGUAGCCGGCGCGUUCCCU
...........((.((((((((.....)))))))).......(...........).....))...................................................................((((.((((((((.((((((.(.((((((((....)))))))).).))))))..((((((....(((((....(((....)))....)))))..)))))))))))))).))))..
UGGCUAGGCUGGGAAGUUAGGCGUUUCCUGUAACUCGAAAUCGCCUUUGCGAGAGCCGAAAACUUGAGGGCGGUUUUAAAUUCUGUCAUUCAUUCUCAAGUUUUGUGUAGACAUUUCGUCCUUUGGGGUAAGAUGGAGGAGGAACCUUUUUUGGAAGAAAAAGACAAACCUCCCUUAUCUUUCGAACCCCGUCAGGCCCGGAAGGGAGCAGCGGUAGA
......(((((((((((.....)))))))....((((............))))))))..............................................................................(.(((((...(((((((....))))))).....))))).)......((.....((((....(((....)))....))))..))
AGUGGGGGCAUUAAGGUGGUGUGGACGCUGUUGUAGCGCUGCAAGCUUGGUCUAUGUAUGCUACUGUUGGCCCGCCCGUUCCAAGUUGAGUAGUGGACCGCUUGGGGCCUAUGCGAAAGUUGGGCCUCACGGUCCAUAAUGUGGCAGGCACCGCGUGAGGCUGGCUUCACAGAGCAGCGACAACUGCCCGCUUCCAACGGUGGAAGGAUAACGGGCCGCUGCA
..........................................................((.((....(((((((.((.(((((.((((.(.(((.(((((..(((((((((.((....))))))))))))))))((...)).(((((......(((....(((......)))....)))....))))).))).)))))..)))))))....))))))).))))
AGGGCAGAUCGGGCAAUCGCGGGGGAUGCAAAUCCUUCGAGGAAGGUCCGGACUCCACAGGGCGGGAUAGCGGCUAACGGCCGUCCGGCGACGCUGGCGGGCUUGCCCGCCGGAAAAGCCGAGGAACAGGGCCACAGAGACGAGUCUGUCAUGAGGGCGCGCCUGGCGCGCACCGGCACGGCCAUCUCCGUGCCGCGCCGUCCGGAAACGGGCGGCGGCAUGACAGGGUGAAACGCGGCAACC
...................((((((((....))))))))..............................(((((.....)))))(((((....((((((((....))))))))....)))).).....(((((...........(((((((((.(.((((((...)))))).)((((((((......))))))))(((((((((....))))))))).))))))))).........)))..))
GAACCCCGCCAGGCCCGGAAGGGAGCAACGGUAGUAGUAUAAUUGUGUGCCGGGGUGUGGCUGG
.....(((.....(((....))).....))).................................
AGCUGUAAUGGCUCAAUGGUGGAAUUGUACACCUUGGGAUUUCUGACUUUGGUUCAAUCCUCGCAGUCGGACGUAGGUUAGCAUGUCACGUUUCGGCGUGGCAAGGGGUACUCACCUUCCCGUGGGGUCCGCACUGCGCGUCGGCGACAACCGUCAUCCUUCUCUCGCUUCCAGUUGCCGAGGCCGUCAAUCUUGGCGGUCUCAGAGAGAGGGACUCGGGGUUAACGUGUCCCGGUUAUUAUC
(((.......)))............................(((((((.(((........))).)))))))(((.((.(.....(((((((....)))))))..(((.(.(.............).))))..))))))....................((((((((.............((((((((((....)))))))))).))))))))...............................
UGAACCCCCCCAGGGCCGGAAGGCAGCAAGGGUAAGCGGGCUCUGGCGGGUG
(.....(((.....(((....))).....)))..).................
GGGCAAUGCGUUAGGCUGGUUUCACAGAGCUGCGAAAACUUCACGCUCUGAACAGUGGAAGGAU
((....(.(((....(((......)))....))).)..))........................
GAACCCCGUCAGGUCCGGAAGGAAGCAGCGGUAAGU
.....((((....(((....)))....)))).....
#+end_example

* Explore data

#+begin_src python :results output
from utils import paired_positions
import subprocess
import matplotlib.pyplot as plt
from matplotlib import rcParams, artist
from matplotlib.patches import Patch
from numpy import mean, std, median, linspace, arange
from scipy.stats import kde
from math import isnan
from RNA import fold_compound, bp_distance
from utils_analysis import get_loop_content
plt.rcParams["font.family"] = "serif"
plt.rcParams["font.weight"] = "bold"
plt.rcParams["font.size"] = 6.7
plt.rcParams["figure.figsize"] = 8, 4


def read_true_struct(infile="./kinetic_bench/benchmark_cleaned_all_length.csv"):
    results = {}
    for l in open(infile):
        seq, struct, name = l.strip().split(",")
        if seq in results:
            results[seq] += [(struct, seq, name)]
        else:
            results[seq] = [(struct, seq, name)]
    return results


true_str = read_true_struct()
tot = []
with open("./kinetic_bench/benchmark_cleaned_red_all_length.csv" ,"w") as out:
    for seq in true_str:
        struct, seq, name = true_str[seq][0]
        if len(true_str[seq]) > 1:
            seq_comp = fold_compound(seq)
            if len(set([st for st, s_, n_ in true_str[seq]])) > 1:
                tot += [len(true_str[seq])]
                min_st, min_nrj = min([(st, seq_comp.eval_structure(st)) for st, s_, n_ in true_str[seq]], key=lambda el: el[1])
                struct = min_st
                print(seq, len(seq))
                for st in set([st for st, s_, n_ in true_str[seq]]):
                    print(st)
            # else:
                
        out.write(f"{seq},{struct},{name}\n")
        
print(mean(tot))
print(min(tot))
print(max(tot))
print(len(tot))
#+end_src

#+RESULTS:
#+begin_example
CUCUUAUUUAGACCUAUGCAAUAGGAUUUUAGGGUAACGCUUCAGGGUAGGAAUACAGCAGAGUCCCCUAAUUUCUUGUGUGCCUUAGCCAUCUGAAUAGGAG 103
..(((.(.(.(..(((.((.((((((..((((((....((((....(((....)))....)))).))))))..)))))))...).))).....)..).).)))
((((((((((((.(((.((.((((((..((((((....((((....(((....)))....)))).))))))..)))))))...).)))...))))))))))))
GACGGGCCUCCUCGCAUGGUGGGGCGGUCAACCUGGUCAGGUCGGGAACGAAGCAGCCACAGCCGUUUUCCGCCAGUGCCGAGGGUCGGGCUCGUC 96
(((((((((((((((.((((((((((((.....((((....(((....)))....))))..))))))..)))))))...))))))...))))))))
(((((((((((((((.((((((((((((.....((((....(((....)))....))))..))))))..)))))))...))))))..)).))))))
GGCGUGCGCCUGUAAUCCAGUUACUUGGAGGCUUGGGUUGGAGGACGGUGUGAGAUUGGGAGCUCUGUGGCGCUCUGUCCUCUGUCCUAUGUCGAUCGGGCGUCCGCGCUAAGCUCGGCGUCAAUAUGGGCAUUCCAGGGGAGCCCGGAGUGGCCAGGUUGUCCAAGGAGGAACGCACCGGGCGAGGCCCGAAAGGGAGCAGCCAAAAGUUCCCACGUUGAUCAGUAGCGGGAUAGCGCCUGUGAAUAGGCGGAGCGUUGCAGCCCAGUCAAUAUCGCGGGACCCAAUCCUUU 293
...............(((........))).....(((((((....(.(((...(((((((....((((((((.......(((((.(((((.(....(((((((((.(((((.(.(((((((((((.(((.((((((.((....)).)))))).))).))))((...)).((.((......(((....(((....)))....)))....))..))))))))).)..)))))))...))))))).).))))))))))))))))))))))))).....))).)...)))))))...
...............(((........))).....(((((((....(.(((...(.(.((.....((((((((.......(((((.(((((.(....(((((((((.(((((.(.(((((((((((.(((.((((((.((....)).)))))).))).))))((...)).((.((......(((....(((....)))....)))....))..))))))))).)..)))))))...))))))).).)))))))))))))))))))).)..).....))).)...)))))))...
CCGAAAGGCUAGGACAAUGGCGGGCUAGUGAAUUGUGUCAGAUCCGGAAGGAAGCAGCACUAAGCAAGUGCCGCCAUGUGUCUGAUUGAAUAA 93
......((.(.(((((.((((((.((.((.....((((....(((....)))....))))...)).))..))))))))..))).).)...)..
......((.(.(((((.(((((((((.((.....((((....(((....)))....))))...)).))).))))))))..))).).)...)..
GACAAAUGUUUUCAGGUCUUCUAAAUCUGUUUUGGAGAAAUCCGUUUGUUUCCA 54
(((((((............((((((.....)))))).......)))))))....
(((((((.....(((((.......)))))....(((....))))))))))....
UUAAGUGACGAUAGCCUAGGAGAUACACCUGUUCCCAUGCCGAACACAGAAGUUAAGCCCUAGUACGCCUGAUGUAGUUGGGGGUUGCCCCCUGUUAGAUACGGUAGUCGCUUAGC 116
((((((((.....(.(((((......((((((.............))))..)).....)))))..).((..(....((.(((((...))))).))....)..))...)))))))).
((((((((.....(.(((((......((((((.............))))..)).....)))))..).((..(....((.((((.....)))).))....)..))...)))))))).
GCCGCGAUAAGAAUAACAUCUGAACGAGUUAGGACCGGAAGGUAGCAGCUAUAAGGAAAAGUGUUCUGUAUUGCGGU 77
(((((((((.(((((...(((.....(((....(((....)))....)))....)))....)))))))..)))))))
.((((((((.(((((...(((.....(((....(((....)))....)))....)))....)))))))..)))))).
GGAGAUCGGCGCGGACGGAGUCCUCGCCAACCUGGUCAGGGCCGAGAGGCAGCAGCCACAACGAGAUCACCUCUGGGUCGUCUGCCGGUCUCCACCUCAUUUU 103
((......(.((((.(((((..((((......((((....(((....)))....))))...)))).....)))))..)))).).....)).............
(((((((.(.((((.(((((..((((......((((....(((....)))....))))...)))).....)))))..)))).)...)))))))..........
GACUCGGACCCAUGCGGCCGCGACGCCUAAAUCUGGUCAGGACCGGAAGGGAGCAGCCACACGGGAUGCUCGUGACAGGCGUGGACUCCGGGUCACC 97
((((((((.((((((.(.((((((((((.....((((.....((....)).....))))...))).)).))))).)..))))))..))))))))...
(.((.((..((((((.(.((((((((((.....((((.....((....)).....))))...))).)).))))).)..))))))..)).)).)....
AGCCCCCGGUCCAGCGCGGCGGGCCAGGCGUGAACCGGGUCAGGUCCGGAAGGAAGCAGCCCUAAGCGCCUCGGUCCGGGCGCCGCUGGGAAGCCGGGGGCGCUU 105
.(((((((((((((((((.(((((.((((((.....((((....(((....)))....))))...))))))..)))))..)).)))))))...))))))))....
.(((((((((((((((((.((((((((((((.....((((....(((....)))....))))...)))))).))))))..)).)))))))...))))))))....
GUUGGGGGCCUUUUAAGAGAAGGAACCUGCGAAUCGGGUCAGGACUGGAAGGUAGCAGCCCUAAGGAGAGUUUUCUUUUGCUAAAAGAAUGUUCUCCAACUUAC 104
..((((((.((((((.(((.(((...((.(.....((((....(((....)))....))))...).))...))).)))...))))))....)).))))......
..((((((.(((((..(((.(((...((.(.....((((....(((....)))....))))...).))...))).)))....)))))....)).))))......
AUGGUCAGGUAGGGUGGAGGGUCUCGCCAGCCCUUAUACCCACAUGGCGCAACGUGGGCACCAGUAACUCCUAUGCUAUAAUACCUGCUCUUCGAGAUCCCAGUCUAACUAUGAUCAUCGCCCGACGGGGCGAGAUAGUCGUGGGUUCCCUUUCUGGAGGGAGAGGGAAUUCCACGUUGACCGGGGGAACCGGCCAGGCCCGGAAGGGAGCAACCGUGCCCGGCUAUCCGCGUUCGUCGGUCUCCGAUAGGAGGAAGACUGGGGGUAAAUCUCGGGGAGUAAGGGUUAUGGCAUAGGGGAGCUGACCAU 309
((((((((.(..((((((((((.......))))))...(((((..........))))))))).....(((((((((((((((...(((((((((((.(((((((((..((....(.((((.(((((((.(((.(((((.((((((((((((((((....))))))))))).))))).)..(((.((....(((.....(((....))).....)))..))))).))))))).).))))))....)))))...)).)))))))))......)))))))))))..).))))))))))))))).))))))))
((((((((.(..((((((((((.......))))))...(((((..........))))))))).....(((((((((((((((...(((((((((((.(((((((((..(..(..(.((((.(((((((.(((.(((((.((((((((((((((((....))))))))))).))))).)..((((.(....(((.....(((....))).....)))..))))).))))))).).))))))....)))).)).)..)))))))))......)))))))))))..).))))))))))))))).))))))))
UUUGGUCAUCAUUGCGAUGGAGAUACACCUGUUCCCAUGUCGAACACAGAAGUUAAGUCCAUCUACGGCGGAAGUACUUGGGGGUUGCCCCCUGGGAGAUAGGCGAGUGGCCAAGU 116
((((((((.....(.((((((.....((((((.............))))..))....))))))..).((..(....((.(((((...))))).))....)..))...)))))))).
((((((((.....(.((((((.....((((((.............))))..))....))))))..).((.(.....(..(((((...))))).).....).).)...)))))))).
GGAGCAACAUUUACUCGUGAAGUGGGUCAGGGGAGGAAUCCAGCAGCCCUAAGCGAUGCUAAAUGUGUGCUCUUUUU 77
((((((.(((((..((((.....((((....(((....)))....))))...))))....)))))))..))))....
((((((.(((((((.(((.....((((....(((....)))....))))...)))..).))))))))..))))....
UUUGCCGUGCUAAGCGGGGAGGUAGCGGUGCCCUAUACUCGCAAUCCGCUCUAGCGAGGCCGAAUCCCUUCUCGAGGUUAUGUUGCUGUAAGGCCUGCCUUAAGUAAGUGGUGUUGACGUUUGGGUCCUGCGCAACGGGACCCCGUGAACCUUGUCAGGUCCGGAAGGAAGCAGCAAUAAGCGGGUCUUCUCGUGUGCCGCAGGAGUGCCUGAACCGAGCUAACUGCUUAAGUAACGCUUAUGGUACGUAAUCGACAGAAGGUGCACGG 269
....((((((...((((((.(.(...).).))))...(((((...........)))))))......((((((...((((((..((.((((((...(((.((((((.((((((......((((((((((((((((.(((((.(((((.....((((....(((....)))....))))...)))))...)))))))...))))))...))))))))...))).))))))))))))...))))).))).))))))...)))))).))))))
....((((((...((((((.(.(...).).))))...(((((...........)))))))......((((((...((((((..((((..(..(..(((.((((((.((((((......((((((((((((((((.((((((((.((.....((((....(((....)))....))))...))))))...))))))...))))))...))))))))...))).)))))))))))).)..)...)))).))))))...)))))).))))))
....((((((....(((((.(.(...).).))))...((.............)).)..........(((..(.(.((((((..(((((((((...(((..(.((..((((((......((((((((((((((((.(((((.(((((.....((((....(((....)))....))))...)))))...)))))))...))))))...))))))))...))).)))..)).))))...))))))))).))))))..).).))).))))))
CGUUUGGGUCCUGCGCAACGGGACCCCGUGAACCUUGUCAGGUCCGGAAGGAAGCAGCAAUAAGCGGGUCUUCUCGUGUGCCGCAGGAGUGCCUGAACCGAGC 103
.((((((((((((((((.(((((.(((((.....((((....(((....)))....))))...)))))...)))))))...))))))...)))))))).....
.((((((((((((((((.((((((((.((.....((((....(((....)))....))))...))))))...))))))...))))))...)))))))).....
CCCUCACGCGGCGCUAUCUGACUGAACUCCCCCAGGGCCGGAAGGCAGCAAGGGUAGGUCGGCUCUGGCGGGUGCGUGGGGG 82
(((((((((..(((((.((((((.....(((.....(((....))).....)))..))))))...))))).)..))))))))
(((.(.(((..(((((.((((((.....(((.....(((....))).....)))..))))))...))))).))).).)))..
UAGUUUGCCUCCGCGCGGCGUUACCCGGGUGAACUCCCCCAGGUUAGGAAUAAAGCAAGGGUAGCUCGGCUCUGGCGGGUGUGCGGGGGUCUUGCGGGCUCCGUU 105
..(.((..((((((((..(((((.((((((.....(((.....(((....))).....)))..))))))...))))).)..)))))))........)).).....
..(...((((((((((..(((((.((((((.....(((.....(((....))).....)))..))))))...))))).)..)))))))))..)............
GGGAGGUUGGUGGUGGACGAGCCACUCGCCAACCGGGUCAGGUCCGGAAGGAAGCAGCCCUAACGAGCCAGGCACGGGUCGCCGUGCCAGCCUCCCACCUUUU 103
(((.(...((((((((.((.(((.((((......((((....(((....)))....))))...))))...))).))..))))))).)...).)))........
(((.(.(..(((((((.((.(((.((((......((((....(((....)))....))))...))))...))).))..)))))))...).).)))........
2.789473684210526
2
6
19
#+end_example

402
* compare loop contents

#+begin_src python :results output
from RNA import b2Shapiro, db_from_plist, PS_rna_plot
from re import findall
from utils_analysis import read_csv, get_loop_content
from numpy import array
import numpy as np
import matplotlib.pyplot as plt
from math import isnan

plt.rcParams["font.family"] = "serif"
plt.rcParams["font.size"] = 12
plt.rcParams["figure.figsize"] = 8, 5

def read_true_struct(infile="./kinetic_bench/benchmark_cleaned_red_all_length.csv"):
    results = {}
    for l in open(infile):
        seq, struct, name = l.strip().split(",")
        if "<" not in struct:
            results[seq] = struct
    return results

fft_pred = read_csv("./kinetic_bench/results_fft_all_length_100n_50ms_best_nrj_scores.csv")
line_pred = read_csv("./test_data/results_linear_scores.csv")
cont_pred = read_csv("./test_data/results_context_scores.csv")
mx_pred = read_csv("./test_data/results_mxfold_scores.csv")
vrna_pred = read_csv("./test_data/results_mfe_scores.csv")
targets = read_true_struct()

results = []
struct_list = []
fft_all_v, mfe_all_v, cont_all_v, line_all_v, mx_all_v = [], [], [], [], []
with open("./scratch/fft_loop_content.csv", "w") as out:
    out.write(f"pcc_fft,int_l,sta_l,mul_l,hai_l\n")
    for seq in targets:
        if seq in fft_pred and seq in vrna_pred and seq in cont_pred and seq in line_pred and seq in mx_pred:
            len_seq, fft_st, fft_nrj, fft_nbp, fft_pvv, fft_sens = fft_pred[seq]
            len_seq, mfe_st, mfe_nrj, mfe_nbp, mfe_pvv, mfe_sens = vrna_pred[seq]
            len_seq, cont_st, cont_nrj, cont_nbp, cont_pvv, cont_sens = cont_pred[seq]
            len_seq, line_st, line_nrj, line_nbp, line_pvv, line_sens = line_pred[seq]
            len_seq, mx_st, mx_nrj, mx_nbp, mx_pvv, mx_sens = mx_pred[seq]
            save_fft, save_mfe, save_cont, save_line, save_mx = fft_pvv, mfe_pvv, cont_pvv, line_pvv, mx_pvv

            true_struct = targets[seq]
            struct_list += [true_struct]
            int_l, sta_l, mul_l, hai_l, ext_l, bul_l = get_loop_content(true_struct)
            results += [[int_l, sta_l, mul_l, hai_l, bul_l, ext_l]]

            fft_all_v += [save_fft]
            mfe_all_v += [save_mfe]
            cont_all_v += [save_cont]
            line_all_v += [save_line]
            mx_all_v += [save_mx]


results = array(results)
results -= results.mean(axis=0)
cov = np.cov(results.T)/results.shape[0]
V, W = np.linalg.eig(cov)
idx = V.argsort()[::-1]
W = W[:, idx]
fig = plt.figure(1)
fig.subplots_adjust(left=0.05, bottom=0.05, right=0.99, top=0.95, wspace=0, hspace=0.05)
fig.tight_layout()

fft_f = fig.add_subplot(121)
mfe_f = fig.add_subplot(122)
# cont_f = fig.add_subplot(223)
# mx_f = fig.add_subplot(224)
fft_f.set_aspect("equal", adjustable="box")
fft_f.grid(True, color="grey",linestyle="--", linewidth=0.2)
mfe_f.set_aspect("equal", adjustable="box")
mfe_f.grid(True, color="grey",linestyle="--", linewidth=0.2)

# cont_f.set_aspect("equal", adjustable="box")
# cont_f.grid(True, color="grey",linestyle="--", linewidth=0.2)
# mx_f.set_aspect("equal", adjustable="box")
# mx_f.grid(True, color="grey",linestyle="--", linewidth=0.2)

wrong_fft = [i for i, el in enumerate(fft_all_v) if el <= 0]
wrong_mfe = [i for i, el in enumerate(mfe_all_v) if el <= 0]
wrong_cont = [i for i, el in enumerate(cont_all_v) if el <= 0]
# wrong_line = [i for i, el in enumerate(line_all_v) if el <= 10]
wrong_mx = [i for i, el in enumerate(mx_all_v) if el <= 0]

proj = results.dot(W)
for el in np.where(proj[:, 1] < -0.5)[0]:
    print(struct_list[el])

# results.dot(W)[results.dot(W[:,0]) > 1] , results.dot(W[:,1])[results.dot(W[:,1]) > 1]
fft_f.scatter(results.dot(W[:,0]) , results.dot(W[:,1]) , edgecolor="", color="grey", alpha=0.5, s=10)
fft_f.scatter(results[wrong_fft, :].dot(W[:,0]) , results[wrong_fft, :].dot(W[:,1]) , edgecolor="", color="deepskyblue", alpha=0.5, s=14)
fft_f.arrow(0, 0, W[0,0]*0.27, W[0,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("I", xy=(W[0,0]*0.27+0.02, W[0,1]*0.27+0.02), size=12)
fft_f.arrow(0, 0, W[1,0]*0.27, W[1,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("S", xy=(W[1,0]*0.27-0.05, W[1,1]*0.27-0.02), size=12)
fft_f.arrow(0, 0, W[2,0]*0.27, W[2,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("M", xy=(W[2,0]*0.27-0.01, W[2,1]*0.27+0.02), size=12)
fft_f.arrow(0, 0, W[3,0]*0.27, W[3,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("H", xy=(W[3,0]*0.27-0.02, W[3,1]*0.27+0.03), size=12)
fft_f.arrow(0, 0, W[4,0]*0.27, W[4,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("B", xy=(W[4,0]*0.27-0.00, W[4,1]*0.27+0.03), size=12)
fft_f.arrow(0, 0, W[5,0]*0.27, W[5,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("E", xy=(W[5,0]*0.27-0.05, W[5,1]*0.27+0.00), size=12)
# fft_f.tick_params(axis="x", labelbottom=False, size=0)
fft_f.set_title(f"RAFFT")

mfe_f.scatter(results.dot(W[:,0]) , results.dot(W[:,1]) , edgecolor="", color="grey", alpha=0.5, s=10)
mfe_f.scatter(results[wrong_mfe, :].dot(W[:,0]) , results[wrong_mfe, :].dot(W[:,1]) , edgecolor="", color="orangered", alpha=0.5, s=14)
mfe_f.arrow(0, 0, W[0,0]*0.27, W[0,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("I", xy=(W[0,0]*0.27+0.02, W[0,1]*0.27+0.02), size=12)
mfe_f.arrow(0, 0, W[1,0]*0.27, W[1,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("S", xy=(W[1,0]*0.27-0.05, W[1,1]*0.27-0.02), size=12)
mfe_f.arrow(0, 0, W[2,0]*0.27, W[2,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("M", xy=(W[2,0]*0.27-0.01, W[2,1]*0.27+0.02), size=12)
mfe_f.arrow(0, 0, W[3,0]*0.27, W[3,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("H", xy=(W[3,0]*0.27-0.02, W[3,1]*0.27+0.03), size=12)
mfe_f.arrow(0, 0, W[4,0]*0.27, W[4,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("B", xy=(W[4,0]*0.27-0.00, W[4,1]*0.27+0.03), size=12)
mfe_f.arrow(0, 0, W[5,0]*0.27, W[5,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("E", xy=(W[5,0]*0.27-0.05, W[5,1]*0.27+0.00), size=12)
mfe_f.tick_params(axis="y", labelleft=False, size=0)
# mfe_f.tick_params(axis="x", labelbottom=False, size=0)
mfe_f.set_title(f"MFE")

# cont_f.scatter(results.dot(W[:,0]) , results.dot(W[:,1]) , edgecolor="", color="grey", alpha=0.5, s=10)
# cont_f.scatter(results[wrong_cont, :].dot(W[:,0]) , results[wrong_cont, :].dot(W[:,1]) , edgecolor="", color="blueviolet", alpha=0.5, s=14)
# cont_f.arrow(0, 0, W[0,0]*0.27, W[0,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# cont_f.annotate("I", xy=(W[0,0]*0.27-0.02, W[0,1]*0.27+0.02), size=12)
# cont_f.arrow(0, 0, W[1,0]*0.27, W[1,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# cont_f.annotate("S", xy=(W[1,0]*0.27-0.05, W[1,1]*0.27-0.02), size=12)
# cont_f.arrow(0, 0, W[2,0]*0.27, W[2,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# cont_f.annotate("M", xy=(W[2,0]*0.27-0.01, W[2,1]*0.27+0.02), size=12)
# cont_f.arrow(0, 0, W[3,0]*0.27, W[3,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# cont_f.annotate("H", xy=(W[3,0]*0.27-0.02, W[3,1]*0.27+0.03), size=12)
# cont_f.arrow(0, 0, W[4,0]*0.27, W[4,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# cont_f.annotate("B", xy=(W[4,0]*0.27-0.00, W[4,1]*0.27+0.03), size=12)
# cont_f.arrow(0, 0, W[5,0]*0.27, W[5,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# cont_f.annotate("E", xy=(W[5,0]*0.27-0.05, W[5,1]*0.27+0.00), size=12)
# cont_f.set_title(f"ContextFold")

# mx_f.scatter(results.dot(W[:,0]) , results.dot(W[:,1]) , edgecolor="", color="grey", alpha=0.5, s=10)
# mx_f.scatter(results[wrong_mx, :].dot(W[:,0]) , results[wrong_mx, :].dot(W[:,1]) , edgecolor="", color="gold", s=14)
# mx_f.arrow(0, 0, W[0,0]*0.27, W[0,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# mx_f.annotate("I", xy=(W[0,0]*0.27-0.02, W[0,1]*0.27+0.02), size=12)
# mx_f.arrow(0, 0, W[1,0]*0.27, W[1,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# mx_f.annotate("S", xy=(W[1,0]*0.27-0.05, W[1,1]*0.27-0.02), size=12)
# mx_f.arrow(0, 0, W[2,0]*0.27, W[2,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# mx_f.annotate("M", xy=(W[2,0]*0.27-0.01, W[2,1]*0.27+0.02), size=12)
# mx_f.arrow(0, 0, W[3,0]*0.27, W[3,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# mx_f.annotate("H", xy=(W[3,0]*0.27-0.02, W[3,1]*0.27+0.03), size=12)
# mx_f.arrow(0, 0, W[4,0]*0.27, W[4,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# mx_f.annotate("B", xy=(W[4,0]*0.27-0.00, W[4,1]*0.27+0.03), size=12)
# mx_f.arrow(0, 0, W[5,0]*0.27, W[5,1]*0.27, width = 0.002, facecolor="black", head_width = 0.02)
# mx_f.annotate("E", xy=(W[5,0]*0.27-0.05, W[5,1]*0.27+0.00), size=12)
# mx_f.tick_params(axis="y", labelleft=False, size=0)
# mx_f.set_title(f"Mxfold")

# plt.savefig("img/comp_fails.png", dpi=300)
plt.show()
#+end_src

#+RESULTS:
#+begin_example
.(((......)))....................(.((....)))..........................((((((...((...((((.........))))...))))))))..........(.(((((..........))))).).....((.......((((....)))).....))................................................((((........))))...............................................
..............................................................................(((.((...(..(((((((....)))))))..)...)))))...(...)...........
......(((((((.(.(...).).))))....(((((...........))))))))...................................................................................(.....((((....(((....)))....))))...)
..............................................................................(((.((..(.((((.((((....)))).)))).).)))))...(...)...........
..(.(((....(((......)))....))).)................................
................................................................................(.((...(.((.(((((....))))).)).)...))).....(...)............
......(((((((((((.....)))))))....((((.(..........).))))))))...............................................................................................
....................(((((((((.(...).)).)))))))................(((..(..(..(((((.....))))).......)..)..)))................
.....(((.....(((....))).....))).................................
((((.....((((....(((....)))....))))..)))).................................
............(((((((..........)))))))...............................................................................
.....................(...).((((((.....((((....(((....)))....)))).))))))...........................
................................................................................(.((...(.((.(((((....))))).)).)...))).....(...)..........
...(.(((......(((....(((.....)))....)))....))).)...........................................
..............................((((....(((....)))....))))
......(((((((.(.(...).).))))....(((((...........))))))))...................................................................................(.....((((....(((....)))....))))...)
.....(((.....(((....))).....))).................................
#+end_example
#+begin_example
* compare loop distribution for predictions

#+begin_src python :results output
from RNA import b2Shapiro, db_from_plist, PS_rna_plot
from re import findall
from utils_analysis import read_csv, get_loop_content
from numpy import array
import numpy as np
import matplotlib.pyplot as plt
from math import isnan

plt.rcParams["font.family"] = "serif"
plt.rcParams["font.size"] = 10
plt.rcParams["figure.figsize"] = 12, 4.0

def read_true_struct(infile="./kinetic_bench/benchmark_cleaned_red_all_length.csv"):
    results = {}
    for l in open(infile):
        seq, struct, name = l.strip().split(",")
        results[seq] = struct
    return results

fft_pred = read_csv("./kinetic_bench/results_fft_all_length_100n_50ms_best_nrj_scores.csv")
vrna_mfe = read_csv("./test_data/results_mfe_scores.csv")
mx_pred = read_csv("./test_data/results_mxfold_scores.csv")
targets = read_true_struct()

results_fft, results_mfe, results_mx = [], [], []
with open("./scratch/fft_loop_content.csv", "w") as out:
    out.write(f"pcc_fft,int_l,sta_l,mul_l,hai_l\n")
    for seq in targets:
        if seq in mx_pred:
            len_seq, fft_st, fft_nrj, fft_nbp, fft_pvv, fft_sens = fft_pred[seq]
            len_seq, mfe_st, mfe_nrj, mfe_nbp, mfe_pvv, mfe_sens = vrna_mfe[seq]
            len_seq, mx_st, mx_nrj, mx_nbp, mx_pvv, mx_sens = mx_pred[seq]
            true_struct = targets[seq]
            int_l, sta_l, mul_l, hai_l, ext_l, bul_l = get_loop_content(mfe_st)
            results_mfe += [[int_l, sta_l, mul_l, hai_l, bul_l, ext_l]]
            int_l, sta_l, mul_l, hai_l, ext_l, bul_l = get_loop_content(fft_st)
            results_fft += [[int_l, sta_l, mul_l, hai_l, bul_l, ext_l]]
            int_l, sta_l, mul_l, hai_l, ext_l, bul_l = get_loop_content(mx_st)
            results_mx += [[int_l, sta_l, mul_l, hai_l, bul_l, ext_l]]


results_fft = array(results_fft)
results_fft -= results_fft.mean(axis=0)
cov_fft = np.cov(results_fft.T)/results_fft.shape[0]
V_fft, W_fft = np.linalg.eig(cov_fft)
idx_fft = V_fft.argsort()[::-1]
W_fft = W_fft[:, idx_fft]

results_mfe = array(results_mfe)
results_mfe -= results_mfe.mean(axis=0)
cov_mfe = np.cov(results_mfe.T)/results_mfe.shape[0]
V_mfe, W_mfe = np.linalg.eig(cov_mfe)
idx_mfe = V_mfe.argsort()[::-1]
W_mfe = W_mfe[:, idx_mfe]

results_mx = array(results_mx)
results_mx -= results_mx.mean(axis=0)
cov_mx = np.cov(results_mx.T)/results_mx.shape[0]
V_mx, W_mx = np.linalg.eig(cov_mx)
idx_mx = V_mx.argsort()[::-1]
W_mx = W_mx[:, idx_mx]

fig = plt.figure(1)
fig.subplots_adjust(left=0.05, bottom=0.1, right=0.99, top=0.90, wspace=0.12, hspace=0.1)
fig.tight_layout()

fft_f = fig.add_subplot(131)
mfe_f = fig.add_subplot(132)
mx_f = fig.add_subplot(133)
fft_f.set_aspect("equal", adjustable="box")
fft_f.grid(True, color="grey",linestyle="--", linewidth=0.2)
fft_f.set_xlim([-0.4, 0.4]); fft_f.set_ylim([-0.4, 0.3])
mfe_f.set_aspect("equal", adjustable="box")
mfe_f.grid(True, color="grey",linestyle="--", linewidth=0.2)
mfe_f.set_xlim([-0.4, 0.4]); mfe_f.set_ylim([-0.4, 0.3])
mx_f.set_aspect("equal", adjustable="box")
mx_f.grid(True, color="grey",linestyle="--", linewidth=0.2)
mx_f.set_xlim([-0.4, 0.4]); mx_f.set_ylim([-0.4, 0.3])

fft_f.scatter(results_fft.dot(W_fft[:,0]) , results_fft.dot(W_fft[:,1]) , edgecolor="", color="grey", alpha=0.5, s=8)
fft_f.arrow(0, 0, W_fft[0,0]*0.3, W_fft[0,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("I", xy=(W_fft[0,0]*0.3-0.02, W_fft[0,1]*0.3+0.02), size=12)
fft_f.arrow(0, 0, W_fft[1,0]*0.3, W_fft[1,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("S", xy=(W_fft[1,0]*0.3-0.00, W_fft[1,1]*0.3+0.04), size=12)
fft_f.arrow(0, 0, W_fft[2,0]*0.3, W_fft[2,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("M", xy=(W_fft[2,0]*0.3-0.01, W_fft[2,1]*0.3+0.02), size=12)
fft_f.arrow(0, 0, W_fft[3,0]*0.3, W_fft[3,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("H", xy=(W_fft[3,0]*0.3-0.02, W_fft[3,1]*0.3+0.03), size=12)
fft_f.arrow(0, 0, W_fft[4,0]*0.3, W_fft[4,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("B", xy=(W_fft[4,0]*0.3+0.02, W_fft[4,1]*0.3+0.03), size=12)
fft_f.arrow(0, 0, W_fft[5,0]*0.3, W_fft[5,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
fft_f.annotate("E", xy=(W_fft[5,0]*0.3+0.01, W_fft[5,1]*0.3-0.03), size=12)
fft_f.set_title(f"RAFFT")

mfe_f.scatter(results_mfe.dot(W_mfe[:,0]) , results_mfe.dot(W_mfe[:,1]) , edgecolor="", color="grey", alpha=0.5, s=8)
mfe_f.arrow(0, 0, W_mfe[0,0]*0.3, W_mfe[0,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("I", xy=(W_mfe[0,0]*0.3-0.02, W_mfe[0,1]*0.3+0.02), size=12)
mfe_f.arrow(0, 0, W_mfe[1,0]*0.3, W_mfe[1,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("S", xy=(W_mfe[1,0]*0.3-0.04, W_mfe[1,1]*0.3+0.03), size=12)
mfe_f.arrow(0, 0, W_mfe[2,0]*0.3, W_mfe[2,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("M", xy=(W_mfe[2,0]*0.3-0.01, W_mfe[2,1]*0.3+0.03), size=12)
mfe_f.arrow(0, 0, W_mfe[3,0]*0.3, W_mfe[3,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("H", xy=(W_mfe[3,0]*0.3-0.02, W_mfe[3,1]*0.3+0.03), size=12)
mfe_f.arrow(0, 0, W_mfe[4,0]*0.3, W_mfe[4,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("B", xy=(W_mfe[4,0]*0.3-0.06, W_mfe[4,1]*0.3+0.03), size=12)
mfe_f.arrow(0, 0, W_mfe[5,0]*0.3, W_mfe[5,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mfe_f.annotate("E", xy=(W_mfe[5,0]*0.3-0.02, W_mfe[5,1]*0.3-0.07), size=12)
mfe_f.tick_params(axis="y", labelleft=False, size=0)
mfe_f.set_title(f"MFE")

mx_f.scatter(results_mx.dot(W_mx[:,0]) , results_mx.dot(W_mx[:,1]) , edgecolor="", color="grey", alpha=0.5, s=8)
mx_f.arrow(0, 0, W_mx[0,0]*0.3, W_mx[0,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mx_f.annotate("I", xy=(W_mx[0,0]*0.3-0.02, W_mx[0,1]*0.3+0.02), size=12)
mx_f.arrow(0, 0, W_mx[1,0]*0.3, W_mx[1,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mx_f.annotate("S", xy=(W_mx[1,0]*0.3+0.02, W_mx[1,1]*0.3+0.03), size=12)
mx_f.arrow(0, 0, W_mx[2,0]*0.3, W_mx[2,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mx_f.annotate("M", xy=(W_mx[2,0]*0.3-0.03, W_mx[2,1]*0.3-0.07), size=12)
mx_f.arrow(0, 0, W_mx[3,0]*0.3, W_mx[3,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mx_f.annotate("H", xy=(W_mx[3,0]*0.3-0.02, W_mx[3,1]*0.3+0.03), size=12)
mx_f.arrow(0, 0, W_mx[4,0]*0.3, W_mx[4,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mx_f.annotate("B", xy=(W_mx[4,0]*0.3+0.02, W_mx[4,1]*0.3-0.04), size=12)
mx_f.arrow(0, 0, W_mx[5,0]*0.3, W_mx[5,1]*0.3, width = 0.002, facecolor="black", head_width = 0.02)
mx_f.annotate("E", xy=(W_mx[5,0]*0.3-0.02, W_mx[5,1]*0.3+0.04), size=12)
mx_f.tick_params(axis="y", labelleft=False, size=0)
mx_f.set_title(f"MXfold")

# plt.savefig("img/content_predicted_data.png", dpi=300)
plt.show()
#+end_src

#+RESULTS:
* base pairs spanning

#+begin_src python :results output
from utils import paired_positions
import subprocess
import matplotlib.pyplot as plt
from matplotlib import rcParams, artist
from matplotlib.patches import Patch
from numpy import mean, std, median, linspace, arange
from scipy.stats import kde
from math import isnan
from RNA import fold_compound, bp_distance
from collections import defaultdict

plt.rcParams["font.family"] = "serif"
plt.rcParams["font.weight"] = "bold"
plt.rcParams["font.size"] = 6.7
plt.rcParams["figure.figsize"] = 8, 4

def read_true_struct(infile="./kinetic_bench/benchmark_cleaned_all_length.csv"):
    results = {}
    for l in open(infile):
        seq, struct, name = l.strip().split(",")
        if "<" not in struct:
            results[seq] = (struct, name)
    return results

def read_csv(infile):
    results = {}
    first = True
    for l in open(infile):
        if not first:
            seq, len_seq, struct, nrj, nb_bp, pvv, sens, name = l.strip().split(",")
            if struct != "Na":
                if pvv == "nan":
                    pvv = 0.0
                results[seq] = (int(len_seq), struct, float(nrj), int(nb_bp), float(pvv), float(sens))
        else:
            first = False
    return results

fft_pred = read_csv("./kinetic_bench/results_fft_all_length_100n_50ms_scores.csv")
# fft_pred = read_csv("./test_data/results_fft_100n_30_stack_scores.csv")
vrna_pred = read_csv("./test_data/results_mfe_scores.csv")
mx_pred = read_csv("./test_data/results_mxfold_scores.csv")
true_str = read_true_struct()

results_fft = defaultdict(lambda : 0)
results_mfe = defaultdict(lambda : 0)
results_mx = defaultdict(lambda : 0)
results_norm = defaultdict(lambda : 0)
for seq, (struct, name) in true_str.items():
    seq_comp = fold_compound(seq)

    true_nb_bp = struct.count("(")
    true_nrj = seq_comp.eval_structure(struct)
    if seq in fft_pred and seq in vrna_pred and seq in mx_pred:
        len_seq, fft_st, fft_nrj, fft_nbp, fft_pvv, fft_sens = fft_pred[seq]
        len_seq, mfe_st, mfe_nrj, mfe_nbp, mfe_pvv, mfe_sens = vrna_pred[seq]
        len_seq, mx_st, mx_nrj, mx_nbp, mx_pvv, mx_sens = mx_pred[seq]
        pair_list_mfe = paired_positions(mfe_st)
        pair_list_fft = paired_positions(fft_st)
        pair_list_mx = paired_positions(mx_st)
        pair_list_true = paired_positions(struct)

        for pi, pj in pair_list_true:
            dist = abs(pi - pj)

            if (pi, pj) in pair_list_mfe:
                results_mfe[dist] += 1.0

            if (pi, pj) in pair_list_fft:
                results_fft[dist] += 1.0
                    
            if (pi, pj) in pair_list_mx:
                results_mx[dist] += 1.0

            results_norm[dist] += 1.0
        

dist_list = list(results_norm.keys())
dist_list.sort()
dist_list = [d for d in dist_list if results_norm[d] > 20]
# pvv_list = [mean(results[d]) for d in dist_list]
pvv_list_mfe = [results_mfe[d]/results_norm[d] for d in dist_list]
pvv_list_fft = [results_fft[d]/results_norm[d] for d in dist_list]
pvv_list_mx = [results_mx[d]/results_norm[d] for d in dist_list]

nb_el = len(dist_list)
slide_mean_mfe = [mean([d for d in pvv_list_mfe[max(0, i-10):min(nb_el, i+10)]]) for i, d_ in enumerate(pvv_list_mfe)]
slide_mean_fft = [mean([d for d in pvv_list_fft[max(0, i-10):min(nb_el, i+10)]]) for i, d_ in enumerate(pvv_list_mfe)]
slide_mean_mx = [mean([d for d in pvv_list_mx[max(0, i-10):min(nb_el, i+10)]]) for i, d_ in enumerate(pvv_list_mfe)]


fig = plt.figure(1)
fft_f = fig.add_subplot(111)

fft_f.grid(True, color="grey",linestyle="--", linewidth=0.2)
fft_f.plot(dist_list, slide_mean_mfe, linestyle="--", c="orangered", alpha = 0.5)
fft_f.scatter(dist_list, pvv_list_mfe, c="orangered", alpha = 0.8, s=6)
fft_f.plot(dist_list, slide_mean_fft, linestyle="--", c="deepskyblue", alpha = 0.5)
fft_f.scatter(dist_list, pvv_list_fft, c="deepskyblue", alpha = 0.8, s=6)
fft_f.plot(dist_list, slide_mean_mx, linestyle="--", c="palegreen", alpha = 0.5)
fft_f.scatter(dist_list, pvv_list_mx, c="palegreen", alpha = 0.8, s=6)
# fft_f.scatter(dist_list, [results_norm[d] for d in dist_list])
plt.show()
#+end_src

#+RESULTS:
* Folding paths

#+begin_src fasta :results output
>RNA frameshift
GGGUUUGCGGUGUAAGUGCAGCCCGUCUUACACCGUGCGGCACAGGCACUAGUACUGAUGUCGUAUACAGGGCUUUUGACAU
.......((((((((..((.....)).))))))))..((.((((.(((....))))).)).))...................
#+end_src

#+begin_example
>step0
..................................................................................

>step1
.....(((((((((((..........))))))))))).............................................
..................................((((((((................))))))))................
...................(((((.............................................)))))........
..................................((((.......)))).................................
(((((..............)))))..........................................................

>step2
........((((((((..........))))))))(((((((((((.........))).))))))))................
........((((((((..........))))))))((((((((..((........))..))))))))................
...................(((((..........(((((((((((.........))).))))))))...)))))........
........((((((((..........))))))))((((((((...((....)).....))))))))................
.....(((((((((((.((.....)))))))))))))....................((((((.............))))))

>step3
........((((((((.((.....))))))))))(((((((((((.........))).))))))))................
........((((((((.((.....))))))))))(((((((((((((....)).))).))))))))................
........((((((((..........))))))))(((((((((((.........))).))))))))................
........((((((((.((.....))))))))))((((((((..((........))..))))))))................
........((((((((..........))))))))((((((((..((........))..))))))))................
#+end_example

#+begin_src bash :results output
seq="GGGUUUGCGGUGUAAGUGCAGCCCGUCUUACACCGUGCGGCACAGGCACUAGUACUGAUGUCGUAUACAGGGCUUUUGACAU"
struct=(
    "........((((((((.((.....))))))))))(((((((((((.........))).))))))))................"
    "........((((((((.((.....))))))))))(((((((((((((....)).))).))))))))................"
    "........((((((((..........))))))))(((((((((((.........))).))))))))................"
    "........((((((((.((.....))))))))))((((((((..((........))..))))))))................"
    "........((((((((..........))))))))((((((((..((........))..))))))))................"
)
output="img/frame_shift/step_3"
resolution=3
for i in {1..5}; do
    java -cp  ~/Downloads/VARNAv3-93.jar fr.orsay.lri.varna.applications.VARNAcmd \
         -sequenceDBN $seq -structureDBN $struct -o ${output}_${i}.png -resolution $resolution\
         -algorithm naview -bpStyle "line"
done
#+end_src
